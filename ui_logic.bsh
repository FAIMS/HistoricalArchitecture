User user; // dont touch
String userid;

setSyncEnabled(true);
setFileSyncEnabled(true);

/*** control ***/
onEvent("control", "show", "refreshBuildings()");
onEvent("control", "show", "loadBuildingAttributes()");

/*** ArchEnt: Building ***/
onEvent("control/building/BuildingList", "click", "loadBuilding()");
onEvent("control/building/newBuilding", "click", "newBuilding()");

onEvent("Building", "show", "hideTabs()");
onEvent("Building/Building/Alterations", "click", "showAlterations()");
onEvent("Building/Building/Verandah", "click", "showVerandah()");

onEvent("Building/Building/Update", "click", "saveBuilding()");
onEvent("Building/Roof/Update", "click", "saveBuilding()");
onEvent("Building/Verandah/Update", "click", "saveBuilding()");
onEvent("Building/Components/Update", "click", "saveBuilding()");
onEvent("Building/Summary_data/Update", "click", "saveBuilding()");
onEvent("Building/Dates/Update", "click", "saveBuilding()");

// onEvent("Cemetery/Cemetery_Graves", "show", "updateAllCemetery()");
onEvent("Building/Building/attachPhoto", "click", "attachPictureTo(\"Building/Building/Photo\")");
onEvent("Building/Building/attachPlan_sketch", "click", "attachFileTo(\"Building/Building/Plan_sketch\")");
onEvent("Building/Building/viewattached", "click", "viewArchEntAttachedFiles(building_id)");

String building_id = null;

hideTabs() {
    cancelTab("Building/Alterations", false);
    cancelTab("Building/Verandah", false);
    showAlterations();
    showVerandah();
}

showAlterations(){
    Object values = fetchOne("select vocabName from vocabulary where vocabid = '"+getFieldValue("Building/Building/Alterations")+"';");   
    String alteration = values.get(0);
    if(alteration.equals("{Yes}")) {
        showTab("Building/Alterations");
    }
}

showVerandah(){
    Object values = fetchOne("select vocabName from vocabulary where vocabid = '"+getFieldValue("Building/Building/Verandah")+"';");
    String verandah = values.get(0);
    if(verandah.equals("{Yes}")) {
        showTab("Building/Verandah");
    }
}

refreshBuildings() {
    populateList("control/building/BuildingList", fetchEntityList("Building"));
}

newBuilding(){
        building_id = null;
    newTabGroup("Building");
}
loadBuilding() {
    building_id = getListItemValue();
    loadBuildingFrom(building_id);
}
loadBuildingFrom(entid) {
    building_id = entid;
    if (isNull(entid)) return;
    showTabGroup("Building", entid);    
}

saveBuilding() {
    if (isNull(getFieldValue("Building/Building/Street_address"))) { 
        showWarning("Validation Error", "Cannot save Building without Street Address.");
        return;
    }
    if (!isNull(building_id)) {
        entity = fetchArchEnt(building_id);
    }
    saveTabGroup("Building", building_id, null, null, "building_id = getLastSavedRecordId();");
}
 
loadBuildingAttributes() {
    populateRadioGroup("Building/Building/Cornerstone", makeVocab("Cornerstone"));
    populateDropDown("Building/Building/Original_purpose", makeVocab("Original purpose"));
    populateRadioGroup("Building/Building/Change_of_purpose", makeVocab("Change of purpose"));
    populateDropDown("Building/Building/Alterations", makeVocab("Alterations"));
    populateRadioGroup("Building/Building/Scale", makeVocab("Scale"));
    populateRadioGroup("Building/Building/Qualities", makeVocab("Qualities"));
    populateDropDown("Building/Building/Orientation_of_facade", makeVocab("Orientation of facade"));
    populateDropDown("Building/Building/Orientation_facade_faces", makeVocab("Orientation facade faces"));
    populateDropDown("Building/Building/Verandah", makeVocab("Verandah"));
    populateDropDown("Building/Building/Forecourt_space", makeVocab("Forecourt space"));
    populateDropDown("Building/Building/Forecourt_decoration", makeVocab("Forecourt decoration"));
    populateDropDown("Building/Building/Outbuildings", makeVocab("Outbuildings"));
    populatePictureGallery("Building/Building/Plan", makePictureGallery("Plan"));

    populateRadioGroup("Building/Roof/Gable_detail_bargeboard", makeVocab("Gable detail bargeboard"));
    populatePictureGallery("Building/Roof/Gable_form", makePictureGallery("Gable form"));
    populateHierarchicalPictureGallery("Building/Roof/Finial", "Finial");
    populateDropDown("Building/Roof/Chimney_orientation", makeVocab("Chimney orientation"));
    populateDropDown("Building/Roof/Chimney_decorative_detail", makeVocab("Chimney decorative detail"));
    populatePictureGallery("Building/Roof/Roof_form", makePictureGallery("Roof form"));

    populateRadioGroup("Building/Verandah/Location", makeVocab("Location"));
    populateRadioGroup("Building/Verandah/Verandah_status", makeVocab("Verandah status"));
    populateDropDown("Building/Verandah/Verandah_decorative_detail", makeVocab("Verandah decorative detail"));
    populateHierarchicalPictureGallery("Building/Verandah/Verandah_posts", "Verandah posts");
    populatePictureGallery("Building/Verandah/Verandah_roof_form", makePictureGallery("Verandah roof form"));

    populateDropDown("Building/Components/Wall_material", makeVocab("Wall material"));
    populatePictureGallery("Building/Components/Wall_brick", makePictureGallery("Wall brick"));
    populatePictureGallery("Building/Components/Wall_masonry", makePictureGallery("Wall masonry"));
    populatePictureGallery("Building/Components/Wall_quoins", makePictureGallery("Wall quoins"));
    populateDropDown("Building/Components/Window_sash", makeVocab("Window sash"));
    populateDropDown("Building/Components/Window_casement", makeVocab("Window casement"));
    populateDropDown("Building/Components/Window_bay", makeVocab("Window bay"));
    populateHierarchicalPictureGallery("Building/Components/Window_arch_lintel", "Window arch/lintel");
    populatePictureGallery("Building/Components/Window_head", makePictureGallery("Window head"));
    populateDropDown("Building/Components/Bay_form", makeVocab("Bay form"));
    populateDropDown("Building/Components/Window_dormer", makeVocab("Window dormer"));
    populateDropDown("Building/Components/Replacements", makeVocab("Replacements"));
    populateHierarchicalPictureGallery("Building/Components/Window_arch_lintel", "Window arch lintel");
    populateDropDown("Building/Components/Window_decorative_detail", makeVocab("Window decorative detail"));
    populateDropDown("Building/Components/Window_glazing", makeVocab("Window glazing"));
    populateDropDown("Building/Components/Door_lintel_arch", makeVocab("Door lintel/arch"));
    populateDropDown("Building/Components/Door_lintel_form", makeVocab("Door lintel form"));
    populateDropDown("Building/Components/Door_decorative_details", makeVocab("Door decorative details"));
    populateDropDown("Building/Components/Door_glazing", makeVocab("Door glazing"));
	populateDropDown("Building/Components/Door_glazing_detail", makeVocab("Door glazing detail"));
    populatePictureGallery("Building/Components/Door_form", makePictureGallery("Door form"));
    

    populateRadioGroup("Building/Summary_data/Archaeological_materials", makeVocab("Archaeological materials"));
    populateDropDown("Building/Summary_data/Heritage_listed", makeVocab("Heritage listed"));
    populateRadioGroup("Building/Summary_data/Substantially_original", makeVocab("Substantially original"));
    // populateCheckBoxGroup("Cemetery/Cemetery_Admin/Denomination", makeVocab("Denomination"));
}

// updateAllCemetery(){
//     if (!isNull(cemetery_id)){
//         gravesInCemetery = fetchAll("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
//         "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
//         "            FROM latestNonDeletedArchentIdentifiers\n"+
//         "           WHERE aenttypename = 'Grave'\n"+
//         "             AND uuid in (select uuid\n"+
//         "                            FROM latestNonDeletedAentReln\n"+
//         "                           where relationshipid in (select relationshipid\n"+
//         "                                                      FROM latestNonDeletedAentReln\n"+
//         "                                                      JOIN relationship using (relationshipid)\n"+
//         "                                                      JOIN relntype using (relntypeid)\n"+
//         "                                                     where uuid = "+cemetery_id+"\n"+
//         "                                                       and relntypeName = 'CemeteryGrave')\n"+
//         "                             and uuid != "+cemetery_id+")\n"+
//         "        ORDER BY uuid, attributename ASC)\n"+
//         "group by uuid\n"+
//         "order by valuetimestamp desc, uuid, attributename;");
//         populateList("Cemetery/Cemetery_Graves/GraveList",  gravesInCemetery);
//     } else {
//         Object empty = fetchAll("select '', '';");
//         populateList("Cemetery/Cemetery_Graves/GraveList",  empty);
//     }
// }

// MISC FUNCTIONS    

saveEntitiesToRel(type, entity1, entity2) {
    if (isNull(entity1) || isNull(entity2)) return;
    rel_id = saveRel(null, type, null, null);
    addReln(entity1, rel_id, null);
    addReln(entity2, rel_id, null);
}

makeVocab(String attrib){
    Object a = fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '"+attrib+"' ");
    return a;
}

makePictureGallery(String attrib){
    fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = '" + attrib + "';");
}

/*** Uneditable - you can edit the code below with extreme precaution ***/
/*** USER ***/

getDefaultUsersList() {
    users = fetchAll("select userid, fname || ' ' || lname from user");
    return users;
}

populateListForUsers(){
    populateList("user/usertab/users", getDefaultUsersList());
}

populateListForUsers();

String username = "";
String device = "";

login(){
    Object userResult = fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';");
    User user = new User(userResult.get(0),userResult.get(1),userResult.get(2),userResult.get(3));
    userid = userResult.get(0);
    setUser(user);
    username = userResult.get(1) + " " + userResult.get(2);
    showTabGroup("control");
}

onEvent("user/usertab/users", "click", "login()");