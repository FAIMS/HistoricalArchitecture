import java.util.concurrent.Callable;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

User user; // dont touch
String userid;

/*** control ***/
onEvent("control", "show", "refreshBuildings();removeNavigationButtons();");
onEvent("control/building/BuildingList", "click", "loadBuilding();");
onEvent("control/building/newBuilding", "click", "newBuilding();");

refreshBuildings() {
    fetchEntityList("Building", new FetchCallback() {
        onFetch(entities) {
            populateList("control/building/BuildingList", entities);
        }
    });
}

startSync() {
    setSyncEnabled(true);
    setFileSyncEnabled(true);
}

stopSync() {
    setSyncEnabled(false);
    setFileSyncEnabled(false);
}

setSyncMinInterval(10.0f);
setSyncMaxInterval(20.0f);
setSyncDelay(5.0f);
startSync();

addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Disable Sync";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("Sync disabled.");
    }
    isActionOff() {
        isSyncEnabled();
    }
    actionOffLabel() {
        "Enable Sync";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("Sync enabled.");
    }
});

removeNavigationButtons() {
    removeNavigationButton("duplicate");
    removeNavigationButton("new");
    removeNavigationButton("close");
    removeNavigationButton("delete");
}

/*** ArchEnt: Building ***/
onEvent("Building", "show", "addBuildingNavigation();");

onFocus("Building/Building/Street_address", null, "activateAutoSaveBuilding();");

onEvent("Building/Building/Has_Alterations", "click", "showAlterationTab();");
onEvent("Building/Building/Has_Verandah", "click", "showVerandahTab();");

onEvent("Building/Alterations", "show", "refreshRelatedAlterations()");
onEvent("Building/Alterations/newAlteration", "click", "newAlterationFromBuilding()");
onEvent("Building/Alterations/AlterationList", "click", "loadAlteration()");

onEvent("Building/Dates", "show", "refreshRelatedDates()");
onEvent("Building/Dates/generateDates", "delayclick", "generateDates()");
onEvent("Building/Dates/newDate", "click", "newDateFromBuilding()");
onEvent("Building/Dates/DateList", "click", "loadDate()");

onEvent("Building/Building/attachPhoto", "click", "attachPictureTo(\"Building/Building/Photo\")");
onEvent("Building/Building/attachPlan_sketch", "click", "attachFileTo(\"Building/Building/Plan_sketch\")");
onEvent("Building/Roof/attachGable_sketch", "click", "attachFileTo(\"Building/Roof/Gable_form_other\")");
onEvent("Building/Roof/attachFinial_sketch", "click", "attachFileTo(\"Building/Roof/Finial_other\")");
onEvent("Building/Verandah/attachVerandahRoof_sketch", "click", "attachFileTo(\"Building/Verandah/Verandah_roof_form_other\")");
onEvent("Building/Verandah/attachVerandahPosts_sketch", "click", "attachFileTo(\"Building/Verandah/Verandah_posts_other\")");
onEvent("Building/Components/attachWindowOther_sketch", "click", "attachFileTo(\"Building/Components/Windows_other\")");
onEvent("Building/Components/attachWindowArch_sketch", "click", "attachFileTo(\"Building/Components/Window_arch_lintel_other\")");
onEvent("Building/Components/attachWindowHead_sketch", "click", "attachFileTo(\"Building/Components/Window_head_other\")");
onEvent("Building/Components/attachDoorForm_sketch", "click", "attachFileTo(\"Building/Components/Door_form_other\")");

onEvent("Building/Building/viewattached", "click", "viewArchEntAttachedFiles(building_id)");
onEvent("Building/Roof/viewattached", "click", "viewArchEntAttachedFiles(building_id)");
onEvent("Building/Verandah/viewattached", "click", "viewArchEntAttachedFiles(building_id)");
onEvent("Building/Components/viewattached", "click", "viewArchEntAttachedFiles(building_id)");

String building_id = null;

newBuilding() {
    newTabGroup("Building");
    building_id = null;
    setTimestamp("Building/Building/Date");    
    // Make sure the Alteration and Verandah tabs are not showing
    onEvent("Building", "show", "showTab(\"Building/Alterations\");showTab(\"Building/Verandah\");cancelTab(\"Building/Verandah\", false);cancelTab(\"Building/Alterations\", false);showTab(\"Building/Building\");");   
}

loadBuilding() {
    building_id = getListItemValue();
    loadBuildingFrom(building_id);
}

loadBuildingFrom(archent_id) {
    if (isNull(archent_id)) {
        showToast("No record selected");
        return;
    }
    showTabGroup("Building", archent_id, new FetchCallback() {
        onFetch(result) {
            building_id = archent_id;
            matchVocab("Building/Building/Has_Verandah", "{Yes}", new FetchCallback() {
                onFetch(result) {
                    if(!isNull(result)) {
                        showTab("Building/Verandah");
                        showTab("Building/Building");    
                    } else {
                        showTab("Building/Verandah");
                        cancelTab("Building/Verandah", false);
                        showTab("Building/Building");    
                    }
                }
            });

            matchVocab("Building/Building/Has_Alterations", "{Yes}", new FetchCallback() {
                onFetch(result) {
                    if(!isNull(result)) {
                        showTab("Building/Alterations");
                        showTab("Building/Building");
                    } else {
                        showTab("Building/Alterations");
                        cancelTab("Building/Alterations", false);
                        showTab("Building/Building");
                    }
                }
            });
            
            saveTabGroup("Building", building_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    building_id = uuid;
                }
            }, true);
        }
    });    
}

activateAutoSaveBuilding() {
    if(!isNull(building_id)) return;
    if(isNull(getFieldValue("Building/Building/Street_address"))) return;
    saveTabGroup("Building", building_id, null, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            building_id = uuid;
            saveTabGroup("Building", building_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    building_id = uuid;
                }
            }, true);
        }
    });
}

isBuildingSaved() {
    if(isNull(building_id)) {
        if (isNull(getFieldValue("Building/Building/Street_address"))) { 
            showWarning("Validation Error", "Cannot save Building without Street Address.");
        } else {
            showToast("Please wait for this {Building} to finish saving.");
        }
        return false;
    }
    return true;
}

newAlterationFromBuilding() {
    if(isBuildingSaved()) newAlteration();
}

newDateFromBuilding() {
    if(isBuildingSaved()) newDate();
}

deleteBuilding() {
    if (!isNull(building_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this {Building} Record!", "reallyDeleteBuilding()", "doNotDelete()");
    } else {
        cancelTabGroup("Building", false);
    }
}

reallyDeleteBuilding() {
    deleteArchEnt(building_id, new DeleteCallback() {
        onDelete(uuid) {
            cancelTabGroup("Building", false);        
        }
    });
}
 
loadBuildingAttributes() {
    makeVocab("DropDown", "Building/Building/Original_purpose", "Original purpose");
    makeVocab("RadioGroup", "Building/Building/Change_of_purpose", "Change of purpose");
    makeVocab("DropDown", "Building/Building/Scale", "Scale");
    makeVocab("RadioGroup", "Building/Building/Qualities", "Qualities");
    makeVocab("DropDown", "Building/Building/Orientation_of_facade", "Orientation of facade");
    makeVocab("DropDown", "Building/Building/Orientation_facade_faces", "Orientation facade faces");
    makeVocab("DropDown", "Building/Building/Forecourt_space", "Forecourt space");
    makeVocab("DropDown", "Building/Building/Forecourt_decoration", "Forecourt decoration");
    makeVocab("DropDown", "Building/Building/Outbuildings", "Outbuildings");
    makePictureGallery("Building/Building/Plan", "Plan");
    makeVocab("RadioGroup", "Building/Building/Has_Verandah", "Has Verandah");
    makeVocab("RadioGroup", "Building/Building/Has_Alterations", "Has Alterations");

    makeVocab("RadioGroup", "Building/Roof/Gable_detail_bargeboard", "Gable detail bargeboard");
    makePictureGallery("Building/Roof/Gable_form", "Gable form");
    populateHierarchicalPictureGallery("Building/Roof/Finial", "Finial");
    makeVocab("DropDown", "Building/Roof/Chimney_form", "Chimney form");
    makeVocab("DropDown", "Building/Roof/Chimney_orientation", "Chimney orientation");
    makeVocab("DropDown", "Building/Roof/Chimney_decorative_detail", "Chimney decorative detail");
    makePictureGallery("Building/Roof/Roof_form", "Roof form");

    makeVocab("RadioGroup", "Building/Verandah/Location", "Location");
    makeVocab("RadioGroup", "Building/Verandah/Verandah_status", "Verandah status");
    makeVocab("DropDown", "Building/Verandah/Verandah_decorative_detail", "Verandah decorative detail");
    makePictureGallery("Building/Verandah/Verandah_posts", "Verandah posts");
    makePictureGallery("Building/Verandah/Verandah_roof_form", "Verandah roof form");

    makeVocab("DropDown", "Building/Walls/Wall_material", "Wall material");
    makePictureGallery("Building/Walls/Wall_brick", "Wall brick");
    makeVocab("RadioGroup", "Building/Walls/Wall_rendered", "Wall rendered");
    makePictureGallery("Building/Walls/Wall_timber", "Wall timber");
    makePictureGallery("Building/Walls/Decorative_Timber", "Decorative Timber");
    makePictureGallery("Building/Walls/Wall_masonry", "Wall masonry");
    makePictureGallery("Building/Walls/Wall_quoins", "Wall quoins");
    makeVocab("DropDown", "Building/Components/Window_sash", "Window sash");
    makeVocab("DropDown", "Building/Components/Window_casement", "Window casement");
    makeVocab("DropDown", "Building/Components/Window_bay", "Window bay");

    makePictureGallery("Building/Components/Window_Type", "Window Type");
    makePictureGallery("Building/Components/Window_head", "Window head");
    makeVocab("DropDown", "Building/Components/Bay_form", "Bay form");
    makeVocab("DropDown", "Building/Components/Window_dormer", "Window dormer");
    makeVocab("DropDown", "Building/Components/Replacements", "Replacements");
    populateHierarchicalPictureGallery("Building/Components/Window_arch_lintel", "Window arch lintel");
    makeVocab("CheckBoxGroup", "Building/Components/Window_decorative_detail", "Window decorative detail");
    makeVocab("DropDown", "Building/Components/Window_glazing", "Window glazing");
    makeVocab("DropDown", "Building/Components/Door_lintel_arch", "Door lintel/arch");
    makeVocab("DropDown", "Building/Components/Door_lintel_form", "Door lintel form");
    makeVocab("DropDown", "Building/Components/Door_glazing", "Door glazing");
    makeVocab("DropDown", "Building/Components/Door_glazing_detail", "Door glazing detail");
    makePictureGallery("Building/Components/Door_form", "Door form");

    makeVocab("RadioGroup", "Building/Summary_data/Archaeological_materials", "Archaeological materials");
    populateHierarchicalDropDown("Building/Summary_data/Heritage_listed", "Heritage listed");
    makeVocab("RadioGroup", "Building/Summary_data/Substantially_original", "Substantially original");
}

addBuildingNavigation() {
    removeNavigationButton("duplicate");
    removeNavigationButton("new");
    removeNavigationButton("close");
    removeNavigationButton("delete");

    addNavigationButton("duplicate", new ActionButtonCallback() {
        actionOnLabel() {
            "Duplicate {Building}";
        }
        actionOn() {
            if(isBuildingSaved()) {
                showTabGroup("Building", building_id, new FetchCallback() {
                    onFetch(result) {
                        building_id = null;
                        populateCameraPictureGallery("Building/Building/Photo", new ArrayList());
                        populateFileList("Building/Building/Plan_sketch", new ArrayList());
                        populateFileList("Building/Roof/Gable_form_other", new ArrayList());
                        populateFileList("Building/Roof/Finial_other", new ArrayList());
                        populateFileList("Building/Verandah/Verandah_roof_form_other", new ArrayList());
                        populateFileList("Building/Verandah/Verandah_posts_other", new ArrayList());
                        populateFileList("Building/Components/Windows_other", new ArrayList());
                        populateFileList("Building/Components/Window_arch_lintel_other", new ArrayList());
                        populateFileList("Building/Components/Window_head_other", new ArrayList());
                        populateFileList("Building/Components/Door_form_other", new ArrayList());
                        setTimestamp("Building/Building/Date");
                        saveTabGroup("Building", building_id, null, null, new SaveCallback() {
                            onSave(uuid, newRecord) {
                                building_id = uuid;
                                saveTabGroup("Building", building_id, null, null, new SaveCallback() {
                                    onSave(uuid, newRecord) {
                                        building_id = uuid;
                                    }
                                }, true);
                            }
                        });
                    }
                });
            }
        }
    }, "success");

    addNavigationButton("new", new ActionButtonCallback() {
        actionOnLabel() {
            "New {Building}";
        }
        actionOn() {
            if(!isNull(building_id)) {
                newBuilding();
            } else {
                showAlert("Warning", "You will lose any unsaved changes!", "newBuilding()", "");
            }
        }
    }, "success");

    addNavigationButton("close", new ActionButtonCallback() {
        actionOnLabel() {
            "Close {Building}";
        }
        actionOn() {
            if(!isNull(building_id)) {
                cancelTabGroup("Building", false);
            } else {
                cancelTabGroup("Building", true);
            }
        }
    }, "success");

    addNavigationButton("delete", new ActionButtonCallback() {
        actionOnLabel() {
            "Delete {Building}";
        }
        actionOn() {
            deleteBuilding();
        }
    }, "danger");
}

refreshRelatedAlterations() {
    if(!isNull(building_id)) {
        fetchAll("select uuid, group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' - ') as response, valuetimestamp\n"+
            "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
            "            FROM latestNonDeletedArchentIdentifiers\n"+
            "           WHERE aenttypename = 'Alteration'\n"+
            "             AND uuid in (select uuid\n"+
            "                            FROM latestNonDeletedAentReln\n"+
            "                           where relationshipid in (select relationshipid\n"+
            "                                                      FROM latestNonDeletedAentReln\n"+
            "                                                      JOIN relationship using (relationshipid)\n"+
            "                                                      JOIN relntype using (relntypeid)\n"+
            "                                                    where uuid = "+building_id+"\n"+
            "                                                       and relntypeName = 'BuildingAlteration')\n"+
            "                             and uuid != "+building_id+")\n"+
            "        ORDER BY uuid, attributename DESC)\n"+
            "group by uuid\n"+
            "order by valuetimestamp desc, uuid, attributename;", new FetchCallback() {
                onFetch(result) {
                    populateList("Building/Alterations/AlterationList", result);
                }
            });
    } else {
        populateList("Building/Alterations/AlterationList", new ArrayList());
    }
}

refreshRelatedDates() {
    if (!isNull(building_id)) {
        fetchAll("select uuid, group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' - ') as response, valuetimestamp\n" +
            "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
            "            FROM latestNonDeletedArchentIdentifiers\n"+
            "           WHERE aenttypename = 'Date'\n"+
            "             AND uuid in (select uuid\n"+
            "                            FROM latestNonDeletedAentReln\n"+
            "                           where relationshipid in (select relationshipid\n"+
            "                                                      FROM latestNonDeletedAentReln\n"+
            "                                                      JOIN relationship using (relationshipid)\n"+
            "                                                      JOIN relntype using (relntypeid)\n"+
            "                                                    where uuid = "+building_id+"\n"+
            "                                                       and relntypeName = 'BuildingDate')\n"+
            "                             and uuid != "+building_id+")\n"+
            "        ORDER BY uuid, case attributename when 'Date Description' then 1 when 'Min date' then 2 when 'Max date' then 3 end)\n"+
            "group by uuid\n"+
            "order by valuetimestamp desc, uuid, attributename;", new FetchCallback() {
                onFetch(result) {
                    print(result);
                    populateList("Building/Dates/DateList", result);
                }
            });
    } else {
        populateList("Building/Dates/DateList", new ArrayList());
    }
}

showAlterationTab() {
    matchVocab("Building/Building/Has_Alterations", "{Yes}", new FetchCallback() {
        onFetch(result) {
            if(!isNull(result)) showTab("Building/Alterations");
        }
    });
}

showVerandahTab() {
    matchVocab("Building/Building/Has_Verandah", "{Yes}", new FetchCallback() {
        onFetch(result) {
            if(!isNull(result)) showTab("Building/Verandah");
        }
    });
}

/** RelnEnt: Alteration **/
onEvent("Alteration", "show", "addAlterationNavigation();");

String alteration_id = null;

newAlteration() {
    newTabGroup("Alteration");
    alteration_id = null;
    setTimestamp("Alteration/hidden/timestamp");
    saveTabGroup("Alteration", alteration_id, null, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            alteration_id = uuid;
            if(newRecord) {
                saveEntitiesToRel("BuildingAlteration", building_id, uuid);    
            }
            saveTabGroup("Alteration", alteration_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    alteration_id = uuid;
                }
            }, true);
        }
    });
}

loadAlteration() {
    alteration_id = getListItemValue();
    loadAlterationFrom(alteration_id);
}

loadAlterationFrom(archent_id) {
    if (isNull(archent_id)) return;
    showTabGroup("Alteration", archent_id, new FetchCallback() {
        onFetch(result) {
            alteration_id = archent_id;
            saveTabGroup("Alteration", alteration_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    alteration_id = uuid;
                }
            }, true);
        }
    });    
}

deleteAlteration() {
    if (!isNull(alteration_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this {Alteration} Record!", "reallyDeleteAlteration()", "doNotDelete()");
    } else {
        cancelTabGroup("Alteration", false);
        showTab("Building/Alterations");
    }
}

reallyDeleteAlteration() {
    deleteArchEnt(alteration_id, new DeleteCallback() {
        onDelete(uuid) {
            cancelTabGroup("Alteration", false);
            showTab("Building/Alterations");
        }    
    });
}

loadAlterationAttributes() {
    makeVocab("DropDown", "Alteration/Alteration/Alteration", "Alteration");
}

addAlterationNavigation() {
    removeNavigationButton("duplicate");
    removeNavigationButton("new");
    removeNavigationButton("close");
    removeNavigationButton("delete");

    addNavigationButton("save", new ActionButtonCallback() {
        actionOnLabel() {
            "Duplicate {Alteration}";
        }
        actionOn() {
            showTabGroup("Alteration", alteration_id, new FetchCallback() {
                onFetch(result) {
                    alteration_id = null;
                    setTimestamp("Alteration/hidden/timestamp");
                    saveTabGroup("Alteration", alteration_id, null, null, new SaveCallback() {
                        onSave(uuid, newRecord) {
                            alteration_id = uuid;
                            if(newRecord) {
                                saveEntitiesToRel("BuildingAlteration", building_id, uuid);    
                            }
                            saveTabGroup("Alteration", alteration_id, null, null, new SaveCallback() {
                                onSave(uuid, newRecord) {
                                    alteration_id = uuid;
                                }
                            }, true);
                        }
                    });
                }
            });
        }
    }, "success");

    addNavigationButton("new", new ActionButtonCallback() {
        actionOnLabel() {
            "New {Alteration}";
        }
        actionOn() {
            newAlteration();
        }
    }, "success");

    addNavigationButton("close", new ActionButtonCallback() {
        actionOnLabel() {
            "Close {Alteration}";
        }
        actionOn() {
            cancelTabGroup("Alteration", false);
            showTab("Building/Alterations");
        }
    }, "success");

    addNavigationButton("delete", new ActionButtonCallback() {
        actionOnLabel() {
            "Delete {Alteration}";
        }
        actionOn() {
            deleteAlteration();
        }
    }, "danger");
}


/*** RelnEnt: Date ***/
onEvent("Date", "show", "addDateNavigation();");

String date_id = null;

newDate() {
    newTabGroup("Date");
    date_id = null;
    setTimestamp("Date/hidden/timestamp");
    saveTabGroup("Date", date_id, null, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            date_id = uuid;
            if(newRecord) {
                saveEntitiesToRel("BuildingDate", building_id, uuid);    
            }
            saveTabGroup("Date", date_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    date_id = uuid;
                }
            }, true);
        }
    });
}

loadDate() {
    date_id = getListItemValue();
    loadDateFrom(date_id);
}

loadDateFrom(archent_id) {
    if (isNull(archent_id)) return;
    showTabGroup("Date", archent_id, new FetchCallback() {
        onFetch(result) {
            date_id = archent_id;
            saveTabGroup("Date", date_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    date_id = uuid;
                }
            }, true);
        }
    });    
}

deleteDate() {
    if (!isNull(date_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this {Date} Record!", "reallyDeleteDate()", "doNotDelete()");
    } else {
        cancelTabGroup("Date", false);
        showTab("Building/Dates");
    }
}

reallyDeleteDate() {
    deleteArchEnt(date_id, new DeleteCallback() {
        onDelete(uuid) {
            cancelTabGroup("Date", false);
            showTab("Building/Dates");
        }
    });
}

loadDateAttributes() {
    makeVocab("DropDown", "Date/Date/Date", "Date");
}

addDateNavigation() {
    removeNavigationButton("duplicate");
    removeNavigationButton("new");
    removeNavigationButton("close");
    removeNavigationButton("delete");

    addNavigationButton("duplicate", new ActionButtonCallback() {
        actionOnLabel() {
            "Duplicate {Date}";
        }
        actionOn() {
            showTabGroup("Date", date_id, new FetchCallback() {
                onFetch(result) {
                    date_id = null;
                    setTimestamp("Date/hidden/timestamp");
                    saveTabGroup("Date", date_id, null, null, new SaveCallback() {
                        onSave(uuid, newRecord) {
                            date_id = uuid;
                            if(newRecord) {
                                saveEntitiesToRel("BuildingDate", building_id, uuid);    
                            }
                            saveTabGroup("Date", date_id, null, null, new SaveCallback() {
                                onSave(uuid, newRecord) {
                                    date_id = uuid;
                                }
                            }, true);
                        }
                    });
                }
            });
        }
    }, "success");

    addNavigationButton("new", new ActionButtonCallback() {
        actionOnLabel() {
            "New {Date}";
        }
        actionOn() {
            newDate();
        }
    }, "success");

    addNavigationButton("close", new ActionButtonCallback() {
        actionOnLabel() {
            "Close {Date}";
        }
        actionOn() {
            cancelTabGroup("Date", false);
            showTab("Building/Dates");
        }
    }, "success");

    addNavigationButton("delete", new ActionButtonCallback() {
        actionOnLabel() {
            "Delete {Date}";
        }
        actionOn() {
            deleteDate();
        }
    }, "danger");
}

generateDates() {
    if(isNull(building_id)) {
        showWarning("Warning", "Please fill in the Street Address.");
        return;
    }
    showAlert("Confirm", "Are you sure? This will delete all of your current dates!", "reallyGenerateDates()", "doNotDelete()");
}

reallyGenerateDates() {
    // Fetch all related dates
    fetchAll("select uuid " +
        "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
        "            FROM latestNonDeletedArchentIdentifiers\n"+
        "           WHERE aenttypename = 'Date'\n"+
        "             AND uuid in (select uuid\n"+
        "                            FROM latestNonDeletedAentReln\n"+
        "                           where relationshipid in (select relationshipid\n"+
        "                                                      FROM latestNonDeletedAentReln\n"+
        "                                                      JOIN relationship using (relationshipid)\n"+
        "                                                      JOIN relntype using (relntypeid)\n"+
        "                                                    where uuid = "+building_id+"\n"+
        "                                                       and relntypeName = 'BuildingDate')\n"+
        "                             and uuid != "+building_id+")\n"+
        "        ORDER BY uuid, attributename DESC)\n"+
        "group by uuid\n"+
        "order by valuetimestamp desc, uuid, attributename;", new FetchCallback() {
            onFetch(result) {
                for(date : result) {
                    deleteArchEnt(date.get(0));
                }
                //create dates based on the values of the fields require
                if (!isNull(getFieldValue("Building/Roof/Roof_form"))) createDate("Building/Roof/Roof_form", "Date obtained from finials:");
                if (!isNull(getFieldValue("Building/Roof/Finial"))) createDate("Building/Roof/Finial", "Date obtained from finials:");
                if (!isNull(getFieldValue("Building/Components/Door_form"))) createDate("Building/Components/Door_form", "Date obtained from doors:");
                if (!isNull(getFieldValue("Building/Verandah/Verandah_roof_form"))) createDate("Building/Verandah/Verandah_roof_form", "Date obtained from verandah roof form:");
                if (!isNull(getFieldValue("Building/Verandah/Verandah_posts"))) createDate("Building/Verandah/Verandah_posts", "Date obtained from verandah posts:");
                if (!isNull(getFieldValue("Building/Summary_data/Sources"))) createDate("Building/Summary_data/Sources", "Date obtained from historical sources:");
                if (!isNull(getFieldValue("Building/Walls/Wall_quoins"))) createDate("Building/Walls/Wall_quoins", "Date obtained from quoins:");
                if (!isNull(getFieldValue("Building/Roof/Chimney_form"))) createDate("Building/Roof/Chimney_form", "Date obtained from chimneys:");
                refreshRelatedDates();
            }
        });

}

createDate(String path, String date_string) {
    fetchOne("select vocabname from vocabulary where vocabid = '" + getFieldValue(path) + "';", new FetchCallback() {
        onFetch(result) {
            vocabname = result.get(0);
            String low_date = null;
            String high_date = null;
            Pattern r = Pattern.compile("([0-9]{4,4})");
            Matcher m = r.matcher(vocabname);
            int count = 0;
            while(m.find()) count++;
            if(count == 1) {
                m = r.matcher(vocabname);
                m.find();
                low_date = m.group();
                high_date = "Present";

            } else if (count == 2) {
                m = r.matcher(vocabname);
                m.find();
                low_date = m.group();
                m.find();
                high_date = m.group();
            }
            if(count != 0) {
                fetchOne("select vocabid from vocabulary where vocabname = '" + date_string + "';", new FetchCallback() {
                    onFetch(result) {
                        List attributes = createAttributeList();
                        attributes.add(createEntityAttribute("Date", null, result.get(0), null, "1.0"));
                        attributes.add(createEntityAttribute("Date Description", null, null, vocabname, "1.0"));
                        attributes.add(createEntityAttribute("Min date", null, null, low_date, "1.0"));
                        attributes.add(createEntityAttribute("Max date", null, null, high_date, "1.0"));
                        saveArchEnt(null, "Date", null, attributes, new SaveCallback() {
                            onSave(uuid, newRecord) {
                                date_id = uuid;
                                saveEntitiesToRel("BuildingDate", building_id, date_id);
                            }
                        });
                    }
                });
            }
        }
    });
}

// MISC FUNCTIONS    

saveEntitiesToRel(String type, String entity1, String entity2) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
        }
    });
}

makeVocab(String type, String path, String attrib) {
    fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '"+attrib+"' order by vocabcountorder",
        new FetchCallback() {
            onFetch(result) {
                if(type.equals("CheckBoxGroup")) {
                    populateCheckBoxGroup(path, result);
                } else if(type.equals("DropDown")) {
                    populateDropDown(path, result);
                } else if(type.equals("RadioGroup")) {
                    populateRadioGroup(path, result);
                } else if(type.equals("List")) {
                    populateList(path, result);
                }
            }
        });
}

matchVocab(String path, String vocabName, FetchCallback callback) {
    fetchOne("select vocabname from vocabulary where vocabname = '" + vocabName + "' and vocabid = '" + getFieldValue(path) + "';", callback);
}

makePictureGallery(String path, String attrib) {
    fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = '" + attrib + "' order by vocabcountorder;",
        new FetchCallback() {
            onFetch(result) {
                populatePictureGallery(path, result);
            }
        });
}

setTimestamp(String path) {
    setFieldValue(path, new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss z").format(new Date()));
}

doNotDelete() {
    showToast("Delete Cancelled.");
}

/*** Uneditable - you can edit the code below with extreme precaution ***/
/*** USER ***/

loadUsers() {
    fetchAll("select userid, fname || ' ' || lname from user where userdeleted is null", new FetchCallback() {
        onFetch(result) {
            populateList("user/usertab/users", result);
        }
    });
}

loadUsers();

String username = "";

login() {
    fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';", new FetchCallback() {
        onFetch(result) {
            user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
            setUser(user);
            username = result.get(1) + " " + result.get(2);
            showTabGroup("control");
        }
    });
}

onEvent("user/usertab/users", "click", "login()");

loadBuildingAttributes();
loadAlterationAttributes();
loadDateAttributes();